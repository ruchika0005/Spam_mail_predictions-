import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import  accuracy_score


#loading the data from csv file to a pandas Dataframe
raw_mail_data =pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

#replace the null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)))

#replace tge null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

mail_data.head()

mail_data.shape

mail_data.loc[mail_data['Category'] == 'spam ' ,'Category' ,] =0
mail_data.loc[mail_data['Category']=='ham' , 'Category ', ] =1

X = mail_data['Message']
Y =mail_data['Category ']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

from sklearn.feature_extraction.text import TfidfVectorizer

# Transform the text data to feature vectors using TF-IDF Vectorizer
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# Convert Y_train and Y_test values to integers
Y_train = Y_train.astype(int)
Y_test = Y_test.astype(int)

import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# Transform text data to feature vectors using TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
X_train_features = tfidf_vectorizer.fit_transform(X_train)
X_test_features = tfidf_vectorizer.transform(X_test)

# Handle non-finite values in Y_train and Y_test
Y_train = np.nan_to_num(Y_train, nan=0.0, posinf=0.0, neginf=0.0)
Y_test = np.nan_to_num(Y_test, nan=0.0, posinf=0.0, neginf=0.0)

# Convert Y_train and Y_test values to integers
Y_train = Y_train.astype(int)
Y_test = Y_test.astype(int)

print(X_train)

print(X_train_features)

model =LogisticRegression()

#training the Logistics Regression model with the trainig data
model.fit(X_train_features , Y_train)

# prediction on the trainig data
prediction_on_training_data =model.predict(X_train_features)
accuracy_on_training_data =accuracy_score(Y_train ,prediction_on_training_data)

print('Accuracy on training data:' , accuracy_on_training_data)

#prediction on test data
prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data =accuracy_score(Y_test , prediction_on_test_data)

print('Accuracy on test data : ', accuracy_on_test_data)

input_mail = ["I've been searching for the right words to thank you for this breather. I promise i wont take your help for granted and will fulfil my promise. You have been wonderful and a blessing at all times"]

# convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# making prediction

prediction = model.predict(input_data_features)
print(prediction)


if (prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression

# Assuming you have already defined and trained your model
# model = ...

# Assuming you have already defined and fitted your feature_extraction on X_train
# feature_extraction = ...

# Input mail
input_mail = ["I've been searching for the right words to thank you for this breather. I promise I won't take your help for granted and will fulfill my promise. You have been wonderful and a blessing at all times"]

# Convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

# Making prediction
prediction = model.predict(input_data_features)

if prediction[0] == 1:
    print('Ham mail')
else:
    print('Spam mail')







